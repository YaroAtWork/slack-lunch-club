Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value:
            Ref: AWS::StackId
        - Key: Application
          Value:
            Ref: AWS::StackId

  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      CidrBlock: 10.0.0.0/24
      Tags:
        - Key: Application
          Value:
            Ref: AWS::StackId

  PrivateSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      CidrBlock: 10.0.1.0/24
      Tags:
        - Key: Application
          Value:
            Ref: AWS::StackId

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Application
          Value:
            Ref: AWS::StackId

  AttachInternetGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId:
        Ref: VPC
      InternetGatewayId:
        Ref: InternetGateway

  NATInstance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-258e1f33
      InstanceType: t2.nano
      CreditSpecification:
        CPUCredits: unlimited
      NetworkInterfaces:
        - GroupSet:
            - Ref: LambdaSecurityGroup
          AssociatePublicIpAddress: "true"
          DeviceIndex: "0"
          DeleteOnTermination: "true"
          SubnetId:
            Ref: PublicSubnet
      SourceDestCheck: "false"
      Tags:
        - Key: Name
          Value: NAT

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VPC
      Tags:
        - Key: Name
          Value:
            Ref: AWS::StackId
        - Key: Application
          Value:
            Ref: AWS::StackId

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VPC
      Tags:
        - Key: Name
          Value:
            Ref: AWS::StackId
        - Key: Application
          Value:
            Ref: AWS::StackId

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachInternetGateway
    Properties:
      RouteTableId:
        Ref: PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: InternetGateway

  PrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      InstanceId:
        Ref: NATInstance

  PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: PublicSubnet
      RouteTableId:
        Ref: PublicRouteTable

  PrivateSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: PrivateSubnet
      RouteTableId:
        Ref: PrivateRouteTable

  NetworkAcl:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId:
        Ref: VPC
      Tags:
        - Key: Application
          Value:
            Ref: AWS::StackId

  PublicSubnetNetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId:
        Ref: PublicSubnet
      NetworkAclId:
        Ref: NetworkAcl

  InboundHTTPNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: NetworkAcl
      RuleNumber: "100"
      Protocol: "6"
      RuleAction: allow
      Egress: "false"
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: "80"
        To: "80"

  InboundHTTPSNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: NetworkAcl
      RuleNumber: "101"
      Protocol: "6"
      RuleAction: allow
      Egress: "false"
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: "443"
        To: "443"

  InboundSMTPSNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: NetworkAcl
      RuleNumber: "102"
      Protocol: "6"
      RuleAction: allow
      Egress: "false"
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: "465"
        To: "465"

  InboundResponsePortsNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: NetworkAcl
      RuleNumber: "103"
      Protocol: "6"
      RuleAction: allow
      Egress: "false"
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: "1024"
        To: "65535"

  OutBoundHTTPNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: NetworkAcl
      RuleNumber: "100"
      Protocol: "6"
      RuleAction: allow
      Egress: "true"
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: "80"
        To: "80"

  OutBoundHTTPSNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: NetworkAcl
      RuleNumber: "101"
      Protocol: "6"
      RuleAction: allow
      Egress: "true"
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: "443"
        To: "443"

  OutBoundSMTPSNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: NetworkAcl
      RuleNumber: "102"
      Protocol: "6"
      RuleAction: allow
      Egress: "true"
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: "465"
        To: "465"

  OutBoundResponsePortsNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: NetworkAcl
      RuleNumber: "103"
      Protocol: "6"
      RuleAction: allow
      Egress: "true"
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: "1024"
        To: "65535"

  ArangoDBInstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId:
        Ref: VPC
      GroupDescription: Enable access to database
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: "8529"
          ToPort: "8529"
          CidrIp: 10.0.0.0/16

  LambdaSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId:
        Ref: VPC
      GroupDescription: Security group to connect lambdas (and NAT instance) to internet.
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: "80"
          ToPort: "80"
          CidrIp: 0.0.0.0/0
          Description: HTTP
        - IpProtocol: tcp
          FromPort: "443"
          ToPort: "443"
          CidrIp: 0.0.0.0/0
          Description: HTTPS
        - IpProtocol: tcp
          FromPort: "465"
          ToPort: "465"
          CidrIp: 0.0.0.0/0
          Description: SMTP mailgun.com
        - IpProtocol: tcp
          FromPort: ${self:custom.secrets.PAPERTRAIL_PORT}
          ToPort: ${self:custom.secrets.PAPERTRAIL_PORT}
          CidrIp: 169.46.82.160/27
          Description: papertrailapp.com
        - IpProtocol: tcp
          FromPort: ${self:custom.secrets.PAPERTRAIL_PORT}
          ToPort: ${self:custom.secrets.PAPERTRAIL_PORT}
          CidrIp: 10.0.1.0/24
          Description: papertrailapp.com (NAT)
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: "0"
          ToPort: "65535"
          CidrIp: 0.0.0.0/0

  PublicHostedZone:
    Type: AWS::Route53::HostedZone
    Properties:
      Name: ${self:custom.secrets.HOSTED_ZONE_NAME}

  PrivateHostedZone:
    Type: AWS::Route53::HostedZone
    Properties:
      Name: ${self:custom.secrets.HOSTED_ZONE_NAME}
      VPCs:
        - VPCId:
            Ref: VPC
          VPCRegion: ${self:provider.region}

  CodeBuildRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: ${self:service}-codebuild
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          Effect: "Allow"
          Principal:
            Service: "codebuild.amazonaws.com"
          Action: "sts:AssumeRole"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AdministratorAccess

  CodeBuildProject:
    Type: "AWS::CodeBuild::Project"
    Properties:
      Name: ${self:service}-test-and-deploy
      Source:
        Location: ${self:custom.secrets.GITHUB_REPO}
        Type: GITHUB
        GitCloneDepth: 1
      BadgeEnabled: true
      ServiceRole: ${self:service}-codebuild
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: ${self:custom.secrets.CI_DOCKER_IMAGE}
      TimeoutInMinutes: 10
      Triggers:
        Webhook: true
      VpcConfig:
        VpcId:
          Ref: VPC
        Subnets:
          - Ref: PrivateSubnet
        SecurityGroupIds:
          - Ref: ArangoDBInstanceSecurityGroup
      Artifacts:
        Type: NO_ARTIFACTS
      Cache:
        Type: S3
        Location: ${self:provider.deploymentBucket}/codebuild_cache

  ArangoDBInstance:
    Type: AWS::EC2::Instance
    Properties:
      # ami generated with https://github.com/arangodb-helper/ami-appliance
      ImageId: ami-8dfe77f2
      CreditSpecification:
        CPUCredits: unlimited
      SecurityGroupIds:
        - Ref: ArangoDBInstanceSecurityGroup
      SubnetId:
        Ref: PrivateSubnet
      InstanceType: t2.nano
      Tags:
        - Key: Name
          Value: arangodb-3.3.8

  DBBackupBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: ${self:service}-db-backups
      AccessControl: "Private"

  VPNSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId:
        Ref: VPC
      GroupDescription: Security group for OpenVPN Server
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: "443"
          ToPort: "443"
          CidrIp: 0.0.0.0/0
        - IpProtocol: udp
          FromPort: "1192"
          ToPort: "1192"
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: "943"
          ToPort: "943"
          CidrIp: 0.0.0.0/0

  VPNIPAddress:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  VPNInstance:
    Type: AWS::EC2::Instance
    Properties:
      Tags:
        - Key: Name
          Value: OpenVPN Server
      # https://aws.amazon.com/marketplace/pp/B00MI40CAE
      ImageId: ami-44aaf953
      InstanceType: t2.micro
      CreditSpecification:
        CPUCredits: unlimited
      SecurityGroupIds:
        - Ref: VPNSecurityGroup
      SubnetId:
        Ref: PublicSubnet
      UserData:
        Fn::Base64:
          Fn::Join:
            - ""
            - - public_hostname=
              - Ref: VPNIPAddress
              - "\n"
              - admin_user=
              - ${self:custom.secrets.VPN_USER}
              - "\n"
              - admin_pw=
              - ${self:custom.secrets.VPN_PASSWORD}
              # TODO figure out how to access private DNS from VPN
              # - "\n"
              # - reroute_dns=1
    DependsOn: VPNIPAddress

  IPAssoc:
    Type: AWS::EC2::EIPAssociation
    Properties:
      AllocationId:
        Fn::GetAtt:
          - VPNIPAddress
          - AllocationId
      InstanceId:
        Ref: VPNInstance
    DependsOn: VPNInstance

  RootSSLCertificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: ${self:custom.secrets.HOSTED_ZONE_NAME}
      DomainValidationOptions:
        - DomainName: ${self:custom.secrets.HOSTED_ZONE_NAME}
          ValidationDomain: ${self:custom.secrets.HOSTED_ZONE_NAME}

  WildcardSSLCertificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: "*.${self:custom.secrets.HOSTED_ZONE_NAME}"

  DnsAliasRecordArangoDB:
    Type: AWS::Route53::RecordSet
    Properties:
      Name: "arangodb.${self:custom.secrets.HOSTED_ZONE_NAME}"
      HostedZoneId:
        Ref: PrivateHostedZone
      Type: A
      TTL: "900"
      ResourceRecords:
        - Fn::GetAtt:
            - ArangoDBInstance
            - PrivateIp

Outputs:
  VPC:
    Value:
      Ref: VPC
    Export:
      Name: "${self:service}-${self:provider.stage}:VPC"
  PublicSubnet:
    Value:
      Ref: PublicSubnet
    Export:
      Name: "${self:service}-${self:provider.stage}:PublicSubnet"
  PrivateSubnet:
    Value:
      Ref: PrivateSubnet
    Export:
      Name: "${self:service}-${self:provider.stage}:PrivateSubnet"
  LambdaSecurityGroup:
    Value:
      Ref: LambdaSecurityGroup
    Export:
      Name: "${self:service}-${self:provider.stage}:LambdaSecurityGroup"
  HostedZoneName:
    Value: ${self:custom.secrets.HOSTED_ZONE_NAME}
    Export:
      Name: "${self:service}-${self:provider.stage}:HostedZoneName"
  PublicHostedZoneId:
    Value:
      Ref: PublicHostedZone
    Export:
      Name: "${self:service}-${self:provider.stage}:PublicHostedZoneId"
  PrivateHostedZoneId:
    Value:
      Ref: PrivateHostedZone
    Export:
      Name: "${self:service}-${self:provider.stage}:PrivateHostedZoneId"
  PapertrailHost:
    Value: ${self:custom.secrets.PAPERTRAIL_HOST}
    Export:
      Name: "${self:service}-${self:provider.stage}:PapertrailHost"
  PapertrailPort:
    Value: ${self:custom.secrets.PAPERTRAIL_PORT}
    Export:
      Name: "${self:service}-${self:provider.stage}:PapertrailPort"
  ArangoDBInstanceId:
    Value:
      Ref: ArangoDBInstance
    Export:
      Name: "${self:service}-${self:provider.stage}:ArangoDBInstanceId"
  ArangoDBInstanceIp:
    Value:
      Fn::GetAtt:
        - ArangoDBInstance
        - PrivateIp
    Export:
      Name: "${self:service}-${self:provider.stage}:ArangoDBInstanceIp"
  DBBackupBucket:
    Value:
      Ref: DBBackupBucket
    Export:
      Name: "${self:service}-${self:provider.stage}:DBBackupBucket"
  OpenVPNServerAdminURL:
    Value:
      Fn::Join:
        - ""
        - - https://
          - Ref: VPNIPAddress
          - "/admin"
    Description: OpenVPN Server Admin URL
  OpenVPNServerURL:
    Value:
      Fn::Join:
        - ""
        - - https://
          - Ref: VPNIPAddress
    Description: OpenVPN Server URL
  RootSSLCertificate:
    Value:
      Ref: RootSSLCertificate
    Export:
      Name: "${self:service}-${self:provider.stage}:RootSSLCertificate"
  WildcardSSLCertificate:
    Value:
      Ref: WildcardSSLCertificate
    Export:
      Name: "${self:service}-${self:provider.stage}:WildcardSSLCertificate"
  DnsAliasRecordArangoDB:
    Value:
      Ref: DnsAliasRecordArangoDB
