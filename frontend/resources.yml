Resources:
  S3WebsiteBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: ${self:custom.domainName}
      AccessControl: "PublicRead"
      WebsiteConfiguration:
        IndexDocument: "index.html"

  S3WebsiteBucketPolicy:
    Type: "AWS::S3::BucketPolicy"
    Properties:
      Bucket:
        Ref: S3WebsiteBucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: AddPerm
            Effect: Allow
            Principal: "*"
            Action:
              - s3:GetObject
            Resource:
              - Fn::Join:
                  - ""
                  - - "arn:aws:s3:::"
                    - ${self:custom.domainName}
                    - "/*"

  WebsiteCdn:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Enabled: true
        Aliases:
          - ${self:custom.domainName}
        Origins:
          - Id: s3-website-bucket
            DomainName:
              Fn::Join:
                - "."
                - - ${self:custom.domainName}
                  - "s3.amazonaws.com"
            S3OriginConfig:
              OriginAccessIdentity: ""
        DefaultRootObject: index.html
        DefaultCacheBehavior:
          TargetOriginId: s3-website-bucket
          AllowedMethods:
            - GET
            - HEAD
            - OPTIONS
          CachedMethods:
            - HEAD
            - GET
            - OPTIONS
          Compress: true
          ForwardedValues:
            QueryString: true
          ViewerProtocolPolicy: "redirect-to-https"
          MinTTL: 0
          DefaultTTL: 0
        CacheBehaviors:
          - TargetOriginId: s3-website-bucket
            PathPattern: "static/*"
            AllowedMethods:
              - GET
              - HEAD
              - OPTIONS
            CachedMethods:
              - HEAD
              - GET
              - OPTIONS
            Compress: true
            ViewerProtocolPolicy: "redirect-to-https"
            ForwardedValues:
              QueryString: false
            MinTTL: 0
            DefaultTTL: 31536000 # one year
        ViewerCertificate:
          AcmCertificateArn:
            Fn::If:
              - isProduction
              - "${self:custom.globalAws.RootSSLCertificate}"
              - "${self:custom.globalAws.WildcardSSLCertificate}"
          SslSupportMethod: sni-only
        CustomErrorResponses:
          - ErrorCode: 404
            ResponseCode: 200
            ErrorCachingMinTTL: 0
            # client will render errors
            ResponsePagePath: /index.html

  DnsAliasRecordPrivate:
    Type: AWS::Route53::RecordSet
    Condition: isNotProduction
    Properties:
      Name: ${self:custom.domainName}
      HostedZoneId: ${self:custom.globalAws.PrivateHostedZoneId}
      Type: A
      AliasTarget:
        DNSName:
          Fn::GetAtt:
            - WebsiteCdn
            - DomainName
        HostedZoneId: "Z2FDTNDATAQYW2" # hardcoded by AWS

  DnsAliasRecordPrivate2:
    Type: AWS::Route53::RecordSet
    Condition: isProduction
    Properties:
      Name: ${self:custom.domainName}
      HostedZoneId: ${self:custom.globalAws.PrivateHostedZoneId}
      Type: A
      AliasTarget:
        DNSName:
          Fn::GetAtt:
            - WebsiteCdn
            - DomainName
        HostedZoneId: "Z2FDTNDATAQYW2" # hardcoded by AWS

  DnsAliasRecordPublic:
    Type: AWS::Route53::RecordSet
    Condition: isProduction
    Properties:
      Name: ${self:custom.domainName}
      HostedZoneId: ${self:custom.globalAws.PublicHostedZoneId}
      Type: A
      AliasTarget:
        DNSName:
          Fn::GetAtt:
            - WebsiteCdn
            - DomainName
        HostedZoneId: "Z2FDTNDATAQYW2" # hardcoded by AWS

Outputs:
  S3WebsiteBucket:
    Value:
      Ref: S3WebsiteBucket
  S3WebsiteBucketPolicy:
    Value:
      Ref: S3WebsiteBucketPolicy
  WebsiteCdn:
    Value:
      Ref: WebsiteCdn
  DnsAliasRecordPublic:
    Condition: isProduction
    Value:
      Ref: DnsAliasRecordPublic
  DnsAliasRecordPrivate:
    Condition: isNotProduction
    Value:
      Ref: DnsAliasRecordPrivate
  DnsAliasRecordPrivate2:
    Condition: isProduction
    Value:
      Ref: DnsAliasRecordPrivate2
